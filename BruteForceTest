//bnewmantkd's implementation of the Brute Force Test of the Travelling Salesman Problem

namespace MITRE.QSD.BFT {

	open Microsoft.Quantum.Arithmetic;
	open Microsoft.Quantum.Canon;
	open Microsoft.Quantum.Intrinsic;
    open Microsoft.Quantum.Convert;
    open Microsoft.Quantum.Arrays;
    open Microsoft.Quantum.Measurement;
    open Microsoft.Quantum.Math;


	operation OptimiseHamiltonianCycle (
		w : Int[],
		N : Int
	) : Int[] {
		//Variable declarations:
        //Needs Q# list of permutations of nodes:
        mutable prospectiveCycles = list(permutations(range(1, N)));
        mutable bestDist = PowD(10.0, 16);

        //Iterables:
        //Needs to be implemented with Q# 2D Int arrays
        for i in prospectiveCycles {
            mutable distance = 0.;
            mutable pre_j = 0;
            for j in i {
                set distance += w[j, pre_j];
                set pre_j = j;
            }
            set distance += w[pre_j, 0];
            mutable order = [0, i];
            if (distance < bestDist) {
                mutable bestOrder = order;
                set bestDist = distance;
                Message("Order = " + order + " Distance = " + distance);
            }
        }

        //Final return statement:
        return (bestDist, bestOrder);
	}
    
    //Running, testing, and printing operation with 6 nodes / cities:
    let testMatrix = [
            [1, 4],
            [3, 6],
            [8, 12],
            [1, 9],
            [2, 5],
            [3, 3]
    ];
    mutable (Best_distance, Best_order) = OptimiseHamiltonianCycle(testMatrix, 6);
    Message("Best order from brute force = " + Best_order + " with total distance = " + Best_distance);
}
